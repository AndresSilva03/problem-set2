#===========================================#
# author: Andrés Felipe Silva Galvis
# update: 11/04/2024
#===========================================#
## initial configuration
rm(list=ls()) # limpiar entorno
## load packages
require(pacman)
## usar la función p_load de pacman para instalar/llamar las librerías de la clase
p_load(tidyverse, # funciones para manipular/limpiar conjuntos de datos.
rio, # función import/export: permite leer/escribir archivos desde diferentes formatos.
skimr, # función skim: describe un conjunto de datos
janitor, # función tabyl: frecuencias relativas
data.table
)
location <- import("Módulo de identificación.dta")
identification <- import("Módulo de sitio o ubicación.dta")
help(export)
export(location,"output/location.rds")
export(identification, "outpu/identification.rds")
export(identification, "output/identification.rds")
View(location)
View(location)
View(identification)
location <-  mutate(location, bussinesstype = case_when(GRUPOS4 == 1 ~ "Agricultura",
GRUPOS4 == 2 ~ "Industria_Manufaturera",
GRUPOS4 == 3 ~ "Comercio"
GRUPOS4 == 4 ~ "Servicios"))
location <-  mutate(location, bussinesstype = case_when(GRUPOS4 == 1 ~ "Agricultura",
GRUPOS4 == 2 ~ "Industria_Manufaturera",
GRUPOS4 == 3 ~ "Comercio",
GRUPOS4 == 4 ~ "Servicios"))
location <-  mutate(location, businesstype = case_when(GRUPOS4 == 01 ~ "Agricultura",
GRUPOS4 == 02 ~ "Industria_Manufaturera",
GRUPOS4 == 03 ~ "Comercio",
GRUPOS4 == 04 ~ "Servicios"))
location <-  mutate(location, businesstype = case_when(GRUPOS4 == 01 ~ "agricultura",
GRUPOS4 == 02 ~ "industria_Manufaturera",
GRUPOS4 == 03 ~ "comercio",
GRUPOS4 == 04 ~ "servicios"))
location <-  mutate(location, businesstype = case_when(GRUPOS4 == "01" ~ "agricultura",
GRUPOS4 == "02" ~ "industria_Manufaturera",
GRUPOS4 == "03" ~ "comercio",
GRUPOS4 == "04" ~ "servicios"))
View(location)
# 2.1)
location <-  mutate(location, businesstype = case_when(GRUPOS4 == 01 ~ "Agricultura",
GRUPOS4 == 02 ~ "Industria_Manufaturera",
GRUPOS4 == 03 ~ "Comercio",
GRUPOS4 == 04 ~ "Servicios"))
View(location)
location <-  mutate(location, businesstype = case_when(GRUPOS4 == "01" ~ "Agricultura",
GRUPOS4 == "02" ~ "Industria_Manufaturera",
GRUPOS4 == "03" ~ "Comercio",
GRUPOS4 == "04" ~ "Servicios"))
View(location)
View(identification)
View(location)
View(identification)
View(identification)
View(location)
location <- mutate(location, grupo_etario = case_when(P241<=26 ~ "Jovenes",
P241>26 & P241<=59 ~ "Adultos",
P241>60 ~ "Adulto_Mayor"))
View(location)
location <- mutate(location, grupo_etario = case_when(P241<18 ~ "Menores de edad"
P241<=26 & P241>=18 ~ "Jovenes",
location <- mutate(location, ambulante = case_when( P241 == 3 &
P241 == 4 &
P241 == 5 & ~ 1))
location <- mutate(location, ambulante = case_when( P241 == 3 &
P241 == 4 &
P241 == 5 ~ 1))
View(location)
location <- mutate(location, ambulante = case_when( P3053 == 3 &
P3053 == 4 &
P3053 == 5 ~ 1))
View(location)
View(identification)
help(mutate)
location <- mutate(identification, ambulante = case_when( P3053 == 3 &
P3053 == 4 &
P3053 == 5 ~ 1))
View(identification)
View(location)
View(identification)
#===========================================#
# author: Andrés Felipe Silva Galvis
# update: 11/04/2024
#===========================================#
## initial configuration
rm(list=ls()) # limpiar entorno
## load packages
require(pacman)
## usar la función p_load de pacman para instalar/llamar las librerías de la clase
p_load(tidyverse, # funciones para manipular/limpiar conjuntos de datos.
rio, # función import/export: permite leer/escribir archivos desde diferentes formatos.
skimr, # función skim: describe un conjunto de datos
janitor, # función tabyl: frecuencias relativas
data.table
)
# ======= 1. Importar/Exportar bases de datos =========#
# 1.1)
identification <- import("Módulo de identificación.dta")
location <- import("Módulo de sitio o ubicación.dta")
# 1.2)
#help(export)
export(identification,"output/identification.rds")
export(location, "output/location.rds")
#=========== 2. Generar variables ============#
# 2.1)
identification <-  mutate(identification, businesstype = case_when(GRUPOS4 == "01" ~ "Agricultura",
GRUPOS4 == "02" ~ "Industria_Manufaturera",
GRUPOS4 == "03" ~ "Comercio",
GRUPOS4 == "04" ~ "Servicios"))
# 2.2)
#P241 es edad según el diccionario
#Dividí los grupos etarios según la clasificacion que da el ministerio de salud
#en su página minsalud.gov.co, todos los grupos etarios menores de 18 años
#los agrupe en uno único para quedar con el requisito de 4 grup. etarios.
identification <- mutate(identification, grupo_etario = case_when(P241<18 ~ "Menores de edad"
P241<=26 & P241>=18 ~ "Jovenes",
identification <- mutate(identification, grupo_etario = case_when(P241<18 ~ "Menores de edad"
P241<=26 & P241>=18 ~ "Jovenes",
View(identification)
identification <- mutate(identification, grupo_etario = case_when(P241<18 ~ "Menores_de_edad"
P241>=18 & P241<=26  ~ "Jovenes",
identification <- mutate(identification, grupo_etario = case_when(P241<18 ~ "Menores_de_edad",
P241>=18 & P241<=26  ~ "Jovenes",
P241>26 & P241<=59 ~ "Adultos",
P241>60 ~ "Adulto_Mayor"))
identification <- mutate(identification, grupo_etario = case_when(P241<18 ~ "Menores de edad",
P241>=18 & P241<=26  ~ "Jovenes",
P241>26 & P241<=59 ~ "Adultos",
P241>60 ~ "Adulto_Mayor"))
#=========== 2. Generar variables ============#
# 2.1)
identification <-  mutate(identification, businesstype = case_when(GRUPOS4 == "01" ~ "Agricultura",
GRUPOS4 == "02" ~ "Industria Manufaturera",
GRUPOS4 == "03" ~ "Comercio",
GRUPOS4 == "04" ~ "Servicios"))
# 2.2)
#P241 es edad según el diccionario
#Dividí los grupos etarios según la clasificacion que da el ministerio de salud
#en su página minsalud.gov.co, todos los grupos etarios menores de 18 años
#los agrupe en uno único para quedar con el requisito de 4 grup. etarios.
identification <- mutate(identification, grupo_etario = case_when(P241<18 ~ "Menores_de_edad",
P241>=18 & P241<=26  ~ "Jovenes",
P241>26 & P241<=59 ~ "Adultos",
P241>60 ~ "Adulto_Mayor"))
# 2.3)
location <- mutate(location, ambulante = case_when( P3053 == 3 &
P3053 == 4 &
P3053 == 5 ~ 1))
View(location)
location <- mutate(location, ambulante = case_when( P3053 == 3 |
P3053 == 4 |
P3053 == 5 ~ 1))
View(location)
View(identification)
vars = c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA",
"grupo_etario","ambulante","COD_DEPTO","F_EXP")
identification_sub <- select(.data = identification,
all_of(vars))
View(identification)
View(identification)
View(location)
vars = c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA",
"grupo_etario",location$"ambulante","COD_DEPTO","F_EXP")
view(vars)
vars = c(identification$"DIRECTORIO",identification$"SECUENCIA_P",identification$"SECUENCIA_ENCUESTA",
identification$"grupo_etario",location$"ambulante",identification$"COD_DEPTO",identification$"F_EXP")
view(vars)
identification_sub <- select(.data = identification,
all_of(vars))
help(c)
vars = c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA",
"grupo_etario","ambulante","COD_DEPTO","F_EXP")
identification_sub <- select(.data = identification,
all_of(vars))
vars = c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA",
"grupo_etario",location$"ambulante","COD_DEPTO","F_EXP")
identification_sub <- select(.data = identification,
all_of(vars))
view(vars)
vars = c("DIRECTORIO";"SECUENCIA_P"; "SECUENCIA_ENCUESTA";
identification$ambulante <- location$ambulante
vars = c("DIRECTORIO","SECUENCIA_P", "SECUENCIA_ENCUESTA",
"grupo_etario","ambulante","COD_DEPTO","F_EXP")
identification_sub <- select(.data = identification,
all_of(vars))
View(identification_sub)
View(location)
View(location)
View(identification)
View(location)
identification_sub <- select(.data = location,
all_of(vars))
vars_loc <- c("DIRECTORIO","SECUENCIA_P", "SECUENCIA_ENCUESTA",
"ambulante","P3054","COD_DEPTO", "F_EXP")
vars_loc <- c("DIRECTORIO","SECUENCIA_P", "SECUENCIA_ENCUESTA",
"ambulante","P3054","COD_DEPTO", "F_EXP")
location_sub <- select(.data = identification, all_of(vars_loc))
View(location)
vars_loc <- c("DIRECTORIO","SECUENCIA_P", "SECUENCIA_ENCUESTA",
"ambulante","P3054","COD_DEPTO", "F_EXP")
location_sub <- select(.data = location, all_of(vars_loc))
View(location_sub)
base_unica <- left_join(location_sub,
identification_sub,
by = c( "DIRECTORIO", "SECUENCIA_P",
"SECUENCIA_ENCUESTA" ))
View(base_unica)
skim(data = base_unica)
summary(base_unica)
skim(data = base_unica)
help(skim)
help(skim)
rm(list=ls())
## load packages
require(pacman)
